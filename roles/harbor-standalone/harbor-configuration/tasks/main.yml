---
- name: upgrade apt repositories
  apt:
    update_cache: true

- name: install docker CE dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common
  ignore_errors: yes

- name: Add an docker CE Apt signing key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg

- name: Add docker CE PPA
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu "{{ ansible_distribution_release }}" stable
    mode: "0644"

- name: Install docker CE
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io

- name: Create a docker group
  group:
    name: docker
    state: present

- name: Add the user to the docker group
  user:
    name: harbor
    group: docker
  
- name: Get docker compose github release info
  uri:
    url: https://api.github.com/repos/docker/compose/releases/latest
    return_content: yes
    body_format: json
  register: docker_compose_release_info

- name: Get docker compose download URL
  set_fact:
    docker_compose_release_url: "{{ docker_compose_release_info.json | to_json | from_json | json_query(json_filter) | join('') }}"
  vars:
    - json_filter: assets[?(contains(name, '{{ release_asset_filter | default('Linux') }}') && !contains(name, 'sha256') && !contains(name, '32'))].browser_download_url

- debug:
    msg: "Downloading docker compose release from: {{ docker_compose_release_url }}"

- name: Install docker compose github release
  get_url:
    url: "{{ docker_compose_release_url }}"
    dest: /usr/local/bin/docker-compose
    mode: 0755

- name: Get harbor github release info
  uri:
    url: https://api.github.com/repos/goharbor/harbor/releases/latest
    return_content: yes
    body_format: json
  register: harbor_release_info

- name: Get harbor download URL
  set_fact:
    harbor_release_url: "{{ harbor_release_info.json | to_json | from_json | json_query(json_filter) | join('') }}"
  vars:
    - json_filter: assets[?(contains(name, '{{ release_asset_filter | default('online') }}') && !contains(name, 'asc'))].browser_download_url

- debug:
    msg: "Downloading harbor release from: {{ harbor_release_url }}"

- name: Create temporary dir
  tempfile:
    state: directory
    suffix: -harbor-installer
  register: temp_dir

- debug:
    msg: "created tmp dir: {{ temp_dir.path }}"

- name: Download and unpack harbor installer
  unarchive:
    src: "{{ harbor_release_url }}"
    dest: "{{ temp_dir.path }}"
    remote_src: true

- name: Prepare harbor configuration
  ansible.builtin.template:
    src: config.j2
    dest: "{{ temp_dir.path }}/harbor/harbor.yml"

- name: Install harbor
  command: "{{ temp_dir.path }}/harbor/install.sh --with-chartmuseum"

- name: Delete temporary dir
  file:
    state: absent
    path: "{{temp_dir.path}}/"

- name: cleanup apt packages
  apt:
    autoclean: true
    autoremove: true
